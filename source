#include "stdio.h"
#include "stdlib.h"
#include "string.h"


typedef unsigned char BYTE;

typedef struct { char type[2]; int size; int reserved; int head_end; int header_size; int weight; int height; int end[7]; int padding; int pad[20]; int p; } bmp;

void read_head(FILE*fin)
{
	bmp str;
	fread(str.type, 2, 1, fin);
	fread(&str.size, 4, 1, fin);
	fread(&str.reserved, 4, 1, fin);
	fread(&str.head_end, 4, 1, fin);
	fread(&str.header_size, 4, 1, fin);
	fread(&str.weight, 4, 1, fin);
	fread(&str.height, 4, 1, fin);
	fread(str.end, 4, 7, fin);
}

void read_rastr(FILE*fin, BYTE ***rastr)
{
	bmp str;
	int padding1 = (str.size - str.head_end - str.height * str.weight * str.p) / str.height;
	int i, j;
	for (i = 0; i < str.height; i++)
	{
		for (j = 0; j < str.weight; j++)
			fread(&rastr[i][j], 3, 1, fin);
		fread(str.pad, str.padding, 1, fin);
	}
}

void work(BYTE ***rastr1, BYTE ***rastr2, BYTE ***rastr)
{
	bmp str;
	int i, j, z, k;
	printf("1)Соеденить справа 1->2");
	printf("2)Соеденить слева 2->1");
	scanf("%d", &k);
	if (k == 1)
		for (i = 0; i < str.height; i++)
		{
			for (j = 0; j < str.weight / 2; j++)
				for (z = 0; z < 3; z++)
					rastr[i][j][z] = rastr1[i][j][z];
			for (j = str.weight / 2; j < str.weight; j++)
				for (z = 0; z < 3; z++)
					rastr[i][j][z] = rastr2[i][j - str.weight / 2][z];
		}
	else
		for (i = 0; i < str.height; i++)
		{
			for (j = 0; j < str.weight / 2; j++)
				for (z = 0; z < 3; z++)
					rastr[i][j][z] = rastr2[i][j][z];
			for (j = str.weight / 2; j < str.weight; j++)
				for (z = 0; z < 3; z++)
					rastr[i][j][z] = rastr1[i][j - str.weight / 2][z];
		}
}

void write_rastr(FILE*fout, BYTE ***rastr)
{
	bmp str;
	fwrite(str.type, 2, 1, fout);
	fwrite(&str.size, 4, 1, fout);
	fwrite(&str.reserved, 4, 1, fout);
	fwrite(&str.head_end, 4, 1, fout);
	fwrite(&str.header_size, 4, 1, fout);
	fwrite(&str.weight, 4, 1, fout);
	fwrite(&str.height, 4, 1, fout);
	fwrite(str.end, 4, 7, fout);

	for (int i = 0; i < str.height; i++)
	{
		for (int j = 0; j < str.weight; j++)
			fwrite(rastr[i][j], 3, 1, fout);
		fwrite(str.pad, str.padding, 1, fout);
	}
}

main()
{
	bmp str;

	FILE * fin1 = fopen("1.bmp", "r");
	perror("Open file");
	read_head(fin1);
	fclose(fin1);
	BYTE rastr1[str.height][str.weight][str.p];
	read_rastr(fin1, rastr1);

	FILE * fin2 = fopen("2.bmp", "r");
	perror("Open file");
	read_head(fin2);
	fclose(fin2);
	BYTE rastr2[str.height][str.weight][str.p];
	read_rastr(fin2, rastr2);

	FILE * fout = fopen("3.bmp", "w");
	perror("Open file");
	str.weight = str.weight * 2;
	BYTE rastr[str.height][str.weight][str.p];
	work(rastr1, rastr2, rastr);
	write_rastr(fout, rastr);
	fclose(fout);
	return 0;
}
